# Django settings for nodeconductor project
from nodeconductor.server.base_settings import *

import saml2

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '{{ secret_key }}'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
TEMPLATE_DEBUG = False

ALLOWED_HOSTS = ['*']

#
# Application definition
#

# Database
# See also: https://docs.djangoproject.com/en/1.6/ref/settings/#databases

DATABASE_MYSQL = {
    # Requirements ('HOST', 'NAME', 'USER' and 'PASSWORD' are configured below):
    #  - MySQL server running and accessible on 'HOST':'PORT'
    #  - User 'USER' created and can login to MySQL server using password 'PASSWORD'
    #  - Database 'NAME' created with all privileges granted to user 'USER'
    #  - MySQL-python installed: https://pypi.python.org/pypi/MySQL-python
    #
    # Example: create database, user and grant privileges:
    #
    #   CREATE DATABASE nodeconductor CHARACTER SET = utf8;
    #   CREATE USER 'nodeconductor'@'%' IDENTIFIED BY 'nodeconductor';
    #   GRANT ALL PRIVILEGES ON nodeconductor.* to 'nodeconductor'@'%';
    #
    # Example: install MySQL-python in RHEL6, CentOS 6.x etc.:
    #
    #   yum install MySQL-python
    #
    'ENGINE': 'django.db.backends.mysql',
    'NAME': 'nodeconductor', # database name
    #'HOST': 'localhost', # default: localhost
    #'PORT': '3106', # default: 3106
    'USER': 'nodeconductor',
    'PASSWORD': 'nodeconductor',
}

DATABASE_SQLITE = {
    'ENGINE': 'django.db.backends.sqlite3',
    'NAME': '{{ db_file_path }}', # database file
}

DATABASE_NONE = {}

DATABASES = {
    # Default database backend
    #
    # Example: use MySQL as default database backend:
    #   'default': DATABASE_MYSQL
    #
    'default': DATABASE_NONE
}

# Logging
# See also: https://docs.djangoproject.com/en/1.6/ref/settings/#logging

LOGGING = {
    'version': 1,
    'handlers': {
        # Logging to file
        # (make sure to add 'file' to loggers.django.handlers to enable)
        # See also: https://docs.python.org/2/library/logging.handlers.html#watchedfilehandler
        #
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.WatchedFileHandler',
            'filename': '/var/log/nodeconductor/nodeconductor.log',
        },
        'file_saml2': {
            'level': 'DEBUG',
            'class': 'logging.handlers.WatchedFileHandler',
            'filename': '/var/log/nodeconductor/saml2.log',
        },

        # Logging to syslog
        # (make sure to add 'syslog' to loggers.django.handlers to enable)
        # See also: https://docs.python.org/2/library/logging.handlers.html#sysloghandler
        #
        'syslog': {
           'level': 'INFO',
           'class': 'logging.handlers.SysLogHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
        'nodeconductor.core.views': {
            'handlers': ['file_saml2'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

STATIC_ROOT = '{{ static_root }}'

# LDAP base settings
# Tested on FreeIPA. For more settings see https://pythonhosted.org/django-auth-ldap/ .
#
#AUTH_LDAP_SERVER_URI = "ldap://ldap.example.com/"
#AUTH_LDAP_BASE = "cn=accounts,dc=example,dc=com"
#AUTH_LDAP_BIND_DN = "uid=BINDUSERNAME," + AUTH_LDAP_USER_BASE
#AUTH_LDAP_BIND_PASSWORD = "BINDPASSWORD"

# LDAP user settings
#
#AUTH_LDAP_USER_BASE = "cn=users," + AUTH_LDAP_BASE
#AUTH_LDAP_USER_FILTER = "(uid=%(user)s)"
#AUTH_LDAP_USER_SEARCH = LDAPSearch(AUTH_LDAP_USER_BASE,
#            ldap.SCOPE_SUBTREE, AUTH_LDAP_USER_FILTER)

# Populate the Django user from the LDAP directory
#AUTH_LDAP_USER_ATTR_MAP = {
#    "first_name": "givenName",
#    "last_name": "sn",
#    "email": "mail"
#}

# LDAP group settings
#
#AUTH_LDAP_GROUP_BASE = "cn=groups," + AUTH_LDAP_BASE
#AUTH_LDAP_GROUP_FILTER = "(objectClass=groupOfNames)"
#AUTH_LDAP_GROUP_SEARCH = LDAPSearch(AUTH_LDAP_GROUP_BASE,
#    ldap.SCOPE_SUBTREE, AUTH_LDAP_GROUP_FILTER
#)
#AUTH_LDAP_GROUP_TYPE = GroupOfNamesType(name_attr="cn")

# Cache group memberships for an 10 mins to minimize LDAP traffic
#AUTH_LDAP_CACHE_GROUPS = True
#AUTH_LDAP_GROUP_CACHE_TIMEOUT = 600

# SAML2 settings
SAML_CONFIG = {
    # full path to the xmlsec1 binary program
    'xmlsec_binary': '/usr/bin/xmlsec1',

    # your entity id, usually your subdomain plus the url to the metadata view
    'entityid': 'saml-sp2',

    # directory with attribute mapping
    'attribute_map_dir': '/path/to/attribute-maps',

    # this block states what services we provide
    'service': {
        # we are just a lonely SP
        'sp': {
            'endpoints': {
                # url and binding to the assertion consumer service view
                # do not change the binding or service name
                'assertion_consumer_service': [
                    ('http://sp.domain/saml2/acs/', saml2.BINDING_HTTP_POST),
                ],
            },
            'allow_unsolicited': True,  # NOTE: This is the cornerstone! Never set to False

            # attributes that this project needs to identify a user
            'required_attributes': [
                'omanIDCivilNumber',
            ],

            # attributes that may be useful to have but not required
            'optional_attributes': [
                'omancardTitleFullNameEn',
                'omancardTitleFullNameAr',
            ],
        },
    },

    # where the remote metadata is stored
    'metadata': {
        'local': [
            '/path/to/idp/on-disk/metadata.xml',
        ],
        # OR
        # 'remote': [
        #     {
        #         "url": "https://idp.domain/path/to/online/metadata",
        #         "cert": "/path/to/on-disk/certificate.crt",
        #     },
        # ],
    },

    # set to 1 to output debugging information
    'debug': 1,

    # These following files are dummies
    # They are supposed to be valid, but are not really used.
    # They are only used to make PySAML2 happy.
    'key_file': '/path/to/key.pem',   # private part
    'cert_file': '/path/to/certificate.crt',  # public part

    'accepted_time_diff': 120,
}

SAML_DJANGO_USER_MAIN_ATTRIBUTE = 'civil_number'

SAML_ATTRIBUTE_MAPPING = {
    'Civil number': ('username', 'civil_number'),
    'omancardTitleFullNameEn': ('full_name', ),
    'omancardTitleFullNameAr': ('native_name', ),
}

# See http://docs.celeryproject.org/en/latest/getting-started/brokers/index.html#broker-instructions
# and http://docs.celeryproject.org/en/latest/configuration.html#broker-url
BROKER_URL = 'redis://localhost'

# See http://docs.celeryproject.org/en/latest/configuration.html#std:setting-CELERY_RESULT_BACKEND
CELERY_RESULT_BACKEND = 'redis://localhost'
